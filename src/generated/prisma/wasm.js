
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('./runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.13.0
 * Query Engine version: 361e86d0ea4987e9f53a565309b3eed797a6bcbd
 */
Prisma.prismaVersion = {
  client: "6.13.0",
  engine: "361e86d0ea4987e9f53a565309b3eed797a6bcbd"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.VehicleScalarFieldEnum = {
  id: 'id',
  registrationNo: 'registrationNo',
  model: 'model',
  tankSize: 'tankSize',
  mileageEst: 'mileageEst',
  createdAt: 'createdAt',
  routeId: 'routeId'
};

exports.Prisma.DriverScalarFieldEnum = {
  id: 'id',
  name: 'name',
  phone: 'phone',
  licenseNo: 'licenseNo',
  createdAt: 'createdAt',
  vehicleId: 'vehicleId'
};

exports.Prisma.RouteScalarFieldEnum = {
  id: 'id',
  name: 'name',
  startPoint: 'startPoint',
  endPoint: 'endPoint',
  createdAt: 'createdAt'
};

exports.Prisma.SensorScalarFieldEnum = {
  id: 'id',
  sensorCode: 'sensorCode',
  isActive: 'isActive',
  installedAt: 'installedAt',
  lastSeen: 'lastSeen',
  vehicleId: 'vehicleId'
};

exports.Prisma.SensorReadingScalarFieldEnum = {
  id: 'id',
  timestamp: 'timestamp',
  fuelLevel: 'fuelLevel',
  distanceKm: 'distanceKm',
  locationLat: 'locationLat',
  locationLong: 'locationLong',
  speed: 'speed',
  ignitionStatus: 'ignitionStatus',
  odometer: 'odometer',
  deviceVoltage: 'deviceVoltage',
  isOverSpeed: 'isOverSpeed',
  processed: 'processed',
  sensorId: 'sensorId'
};

exports.Prisma.AlertScalarFieldEnum = {
  id: 'id',
  timestamp: 'timestamp',
  type: 'type',
  description: 'description',
  locationLat: 'locationLat',
  locationLong: 'locationLong',
  sensorId: 'sensorId'
};

exports.Prisma.HistoryScalarFieldEnum = {
  id: 'id',
  timestamp: 'timestamp',
  type: 'type',
  description: 'description',
  fuelLevel: 'fuelLevel',
  fuelDropLitres: 'fuelDropLitres',
  vehicleId: 'vehicleId',
  sensorId: 'sensorId',
  locationLat: 'locationLat',
  locationLong: 'locationLong'
};

exports.Prisma.SummaryMetricsScalarFieldEnum = {
  id: 'id',
  vehicleId: 'vehicleId',
  fromDate: 'fromDate',
  toDate: 'toDate',
  sFuelLevel: 'sFuelLevel',
  eFuelLevel: 'eFuelLevel',
  totalFuelConsumed: 'totalFuelConsumed',
  totalFuelFills: 'totalFuelFills',
  totalFuelDrops: 'totalFuelDrops',
  kmpl: 'kmpl',
  totalDistanceKm: 'totalDistanceKm',
  totalRunningHours: 'totalRunningHours',
  totalIdleHours: 'totalIdleHours',
  totalStoppageHours: 'totalStoppageHours',
  dropAlert: 'dropAlert',
  fillAlert: 'fillAlert'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.AlertType = exports.$Enums.AlertType = {
  THEFT: 'THEFT',
  REFUEL: 'REFUEL',
  LOW_FUEL: 'LOW_FUEL',
  SENSOR_HEALTH: 'SENSOR_HEALTH',
  NORMAL: 'NORMAL',
  UNKNOWN: 'UNKNOWN'
};

exports.Prisma.ModelName = {
  Vehicle: 'Vehicle',
  Driver: 'Driver',
  Route: 'Route',
  Sensor: 'Sensor',
  SensorReading: 'SensorReading',
  Alert: 'Alert',
  History: 'History',
  SummaryMetrics: 'SummaryMetrics'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
