generator client {
  provider      = "prisma-client-js"
  output        = "../src/generated/prisma"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Vehicle {
  id             String   @id @default(uuid())
  registrationNo String   @unique
  model          String?
  tankSize       Int?
  mileageEst     Float?
  createdAt      DateTime @default(now())

  driver    Driver?
  route     Route?   @relation(fields: [routeId], references: [id])
  routeId   String?
  sensor    Sensor?

  histories History[]
  summaries SummaryMetrics[]
}

model Driver {
  id        String   @id @default(uuid())
  name      String
  phone     String   @unique
  licenseNo String   @unique
  createdAt DateTime @default(now())

  vehicle   Vehicle @relation(fields: [vehicleId], references: [id])
  vehicleId String  @unique
}

model Route {
  id         String   @id @default(uuid())
  name       String   @unique
  startPoint String
  endPoint   String
  createdAt  DateTime @default(now())

  vehicles Vehicle[]
}

model Sensor {
  id          String    @id @default(uuid())
  sensorCode  String    @unique
  isActive    Boolean   @default(true)
  installedAt DateTime  @default(now())
  lastSeen    DateTime?

  vehicle   Vehicle @relation(fields: [vehicleId], references: [id])
  vehicleId String  @unique

  readings  SensorReading[]
  alerts    Alert[]
  histories History[]
}

model SensorReading {
  id              String   @id @default(uuid())
  timestamp       DateTime
  fuelLevel       Float
  distanceKm      Float
  locationLat     Float
  locationLong    Float
  speed           Float
  ignitionStatus  String?
  odometer        Float?
  deviceVoltage   Float?
  isOverSpeed     Boolean?
  processed       Boolean  @default(false)

  sensor   Sensor @relation(fields: [sensorId], references: [id])
  sensorId String

  @@index([timestamp])
}

model Alert {
  id           String    @id @default(uuid())
  timestamp    DateTime  @default(now())
  type         AlertType
  description  String?
  locationLat  Float
  locationLong Float

  sensor   Sensor @relation(fields: [sensorId], references: [id])
  sensorId String
}

model History {
  id             String   @id @default(uuid())
  timestamp      DateTime @default(now())
  type           AlertType
  description    String
  fuelLevel      Float
  fuelDropLitres Float?

  vehicle   Vehicle @relation(fields: [vehicleId], references: [id])
  vehicleId String

  sensor    Sensor  @relation(fields: [sensorId], references: [id])
  sensorId  String

  locationLat  Float
  locationLong Float
}

model SummaryMetrics {
  id                   String   @id @default(uuid())
  vehicleId             String
  fromDate              DateTime
  toDate                DateTime
  sFuelLevel            Float
  eFuelLevel            Float
  totalFuelConsumed     Float
  totalFuelFills        Float
  totalFuelDrops        Float
  kmpl                  Float
  totalDistanceKm       Float
  totalRunningHours     Float
  totalIdleHours        Float
  totalStoppageHours    Float
  dropAlert             Boolean  @default(false)
  fillAlert             Boolean  @default(false)

  vehicle   Vehicle @relation(fields: [vehicleId], references: [id])

  @@index([fromDate, toDate])
}

enum AlertType {
  THEFT
  REFUEL
  LOW_FUEL
  SENSOR_HEALTH
  NORMAL
  UNKNOWN
}

enum LogLevel {
  INFO
  WARNING
  ERROR
}
